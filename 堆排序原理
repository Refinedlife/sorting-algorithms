// 参考《大话数据结构》
http://www.cnblogs.com/cj723/archive/2011/04/21/2024261.html
http://www.cnblogs.com/cj723/archive/2011/04/22/2024269.html

堆排序算法是Floyd和Williams在1964年共同发明的，他们同时创造了“堆”这种数据结构。
堆是具有下列性质的完全二叉树：每个结点的值都大于其左右孩子的值，称为大顶堆（The Max Heap）。每个结点的值都小于其左右孩子的值，称为小顶堆（The Min Heap）。
为了实现堆排序，一般将堆中的元素按照层序遍历的方式存入数组array[]中，其中array[0]不存储任何元素。则数组array[]一定满足a[i] >= a[2 * i]   a[i] >= a[2 * i + 1]
（大顶堆），a[i] <=  a[2 * i]    a[i] <= a[2 * i + 1]（小顶堆）。

堆排序（Heap Sort）就是利用堆（假设利用大顶堆）进行排序的方法。它的基本思想是，将待排序的序列构造成一个大顶堆。此时，整个序列的最大值就是堆顶的根结点。将它移走（其实就是将其与堆数组的末尾元素交换，此时末尾元素就是最大值），然后将剩余的n-1个序列重新构造成一个堆，这样就会得到n个元素中的次小值。如此反复执行，便能得到一个有序序列了。

需要解决两个问题：（1）如何由一个无序序列构建成一个堆？（2）如果在输出堆顶元素后，调整剩余元素成为一个新的堆？要解释清楚它们，让我们来看代码。
/* 对顺序表L进行堆排序 */
void HeapSort(SqList *L)
{
 int i;
 for(i=L->length/2;i>0;i--)  /* 把L中的r构建成一个大顶堆 */
   HeapAdjust(L,i,L->length);
 for(i=L->length;i>1;i--)
 { 
   swap(L,1,i);    /*将堆顶记录和当前未经排序子序列的最后一个记录交换*/
   HeapAdjust(L,1,i-1);   /* 将L->r[1..i-1]重新调整为大顶堆 */
 }
}
从代码中也可以看出，整个排序过程分为两个for循环。第一个循环要完成的就是将现在的待排序序列构建成一个大顶堆。第二个循环要完成的就是逐步将每个最大值的根结点与末尾元素交换，并且再调整其成为大顶堆。

 我们所谓的将待排序的序列构建成为一个大顶堆，其实就是从下往上，从右到左，将每个非终端结点（非叶结点）当作根结点，将其和其子树调整成大顶堆。
现在我们来看关键的HeapAdjust（堆调整）函数是如何实现的。
/* 已知L->r[s..m]中记录的关键字除L->r[s]之外均满足堆的定义， */

/* 本函数调整L->r[s]的关键字,使L->r[s..m]成为一个大顶堆 */
void HeapAdjust(SqList *L,int s,int m)
{ 
 int temp,j;
 temp=L->r[s];
 for(j=2*s;j<=m;j*=2)  /* 沿关键字较大的孩子结点向下筛选 */
 {
  if(j<m && L->r[j]<L->r[j+1])
   ++j;   /* j为关键字中较大的记录的下标 */
  if(temp>=L->r[j])
   break;   /* rc应插入在位置s上 */
  L->r[s]=L->r[j];
  s=j;
 }
 L->r[s]=temp;   /* 插入 */
}

堆排序复杂度分析
        堆排序的效率到底有多好呢？我们来分析一下。
        它的运行时间主要是消耗在初始构建堆和在重建堆时的反复筛选上。
        在构建堆的过程中，因为我们是完全二叉树从最下层最右边的非终端结点开始构建，将它与其孩子进行比较和若有必要的互换，对于每个非终端结点来说，其实最多进行两次比较和互换操作，因此整个构建堆的时间复杂度为O(n)。
        在正式排序时，第i次取堆顶记录重建堆需要用O(logi)的时间（完全二叉树的某个结点到根结点的距离为⌊log2i⌋+1），并且需要取n-1次堆顶记录，因此，重建堆的时间复杂度为O(nlogn)。
        所以总体来说，堆排序的时间复杂度为O(nlogn)。由于堆排序对原始记录的排序状态并不敏感，因此它无论是最好、最坏和平均时间复杂度均为O(nlogn)。这在性能上显然要远远好过于冒泡、简单选择、直接插入的O(n2)的时间复杂度了。
        空间复杂度上，它只有一个用来交换的暂存单元，也算是非常的不错。不过由于记录的比较与交换是跳跃式进行，因此堆排序也是一种不稳定的排序方法。
        另外，由于初始构建堆所需的比较次数较多，因此，它并不适合待排序序列个数较少的情况。 


注：（我的理解）
《大话数据结构》中关于堆排序的讲解还算不错，但是不看实例图的话根本理解不了代码啊啊啊啊～T_T，里面的代码是基于它自己提供的struct结构，真的挺抽象的，所以在这里我还是重写一下吧！
void HeapSort(list L) {
    int i;
    // 将整个序列调整为最大堆
    for (i = L.size() / 2; i > 0; i--) {  // i在这里代表了有孩子的所有结点，也就是Node To Be Adjusted.
        HeapAdjust(L, i, L.size());
    }
    // 排序
    for (int j = L.size(); j > 1; j--) {
        swap(L, 1, j);   /*将堆顶记录和当前未经排序子序列的最后一个记录交换*/
        HeapAdjust(L, 1, j - 1);  /* 重新调整为大顶堆 */
    }
}

void HeapAdjust(list L, int target, int amount) {   // target: Node to be adjusted  amount: amount of the nodes
    int temp, index;
    primary = L.array[target];
    for (index = 2 * target; index < amount; index *= 2) {
        if (index < amount && L.array[index] < L.array[index + 1]) {
            index++;
        }
        if (primary >= L.array[index]) {
            break;
        } else if (primary < L.array[index]) {
            L.array[target] = L.array[index];
            target = index;
        }
    }
    L.array[target] = primary;
}
